What is Java?
-->Java is a widely-used programming language for coding web applications. It has been a popular choice among developers for over two decades, with millions of Java applications in use today. Java is a multi-platform, object-oriented, and network-centric language that can be used as a platform in itself. It is a fast, secure, reliable programming language for coding everything from mobile apps and enterprise software to big data applications and server-side technologies.

What is Java programming language used for? 
-->
1.Game Development
2.Cloud computing3.    
3.Big Data
4.Artificial Intelligence
5.Internet of Things
6.Mobile App Development
7.Desktop GUI Applications
8.Web-based Applications
10. Distributed Applications
   

Why is Java such a popular choice among modern-day software developers?
-->
High quality learning resources
Security
Active community support
Platform Independent
High-quality development tools
Inbuilt functions and libraries

How does Java work? 
All programming languages are a means to communicate with machines. Machine hardware only responds to electronic communication. High-level programming languages like Java act as a bridge between human language and hardware language. To use Java, a developer needs to understand two things:
1. Java language and APIs : This is the front-end communication between the developer and the Java platform.
2. Java Virtual Machine : This is the back-end communication between the Java platform and the underlying hardware. Letâ€™s look at each of these in detail below.


What is Java API?
Java defines the syntax and semantics of the Java programming language. This includes the basic vocabulary and rules used to write algorithms such as primitive data types, if/else blocks, loops, etc.
APIs are important software components bundled with the Java Platform. These are pre-written Java programs that can plug and play existing functionality into your own code. For example, you could use Java APIs to get the date and time, perform mathematical operations, or manipulate text. 
Any Java application code written by a developer will typically combine new and pre-existing code from Java APIs and Java libraries.


What is Java Virtual Machine?
The Java Virtual Machine acts as an additional abstraction layer between the Java platform and the underlying machine hardware. Java source code can run only on those machines that have JVM installed on them. The answer to why the Java Virtual Machine is needed lies in the history of programming.

The history of programming
When natural programming languages were first developed, they fell into two broad categories, depending on how they communicated with the underlying hardware.
  Compilers: The complete program is written in natural English-like syntax with compilers, and the language then compiles (or translates) the entire code into machine code. The compiled code is then run on the hardware.
    Interpreters: With interpreters, every high-level code statement is interpreted into machine code on the fly.  Written statements are run immediately by the hardware before looking at the next statement.


The Java runtime environment:
The Java program was the first language to combine both methods above using a Java Virtual Machine (JVM). The Java code compiler is called the Java Virtual Machine. Any Java file is first compiled into bytecode. Java bytecode can only run in the JVM. The JVM then interprets the bytecode to run it on the underlying hardware platform. So if the application is running on a Windows machine, the JVM will interpret it for Windows. But if it is running on an open-source platform like Linux, the JVM will interpret it for Linux. 



How to program in Java?
-->To begin programming in Java, you need to install a Java Edition on your system.
    Java Standard Edition (Java SE)
    Java Enterprise Edition (Java EE)
    Java Micro Edition (Java ME)


-------------------------------------------------
 
First install jdk in your system.

Then develop java program.
Then compiler your program.
Then run the program.

-------------------------------------------------
JDK:
Java Development Kit
JDK provides envirnoment to develop and run java applications.

JRE:
Java Runtime Environment (JRE)
To just run java application that required enviroment is JRE.

In jre who is responsible to run our program ?
-->JVM 


JVM:
Java virtual machine
JVM is reponsible to run our java program line by line.

So JVM is Interpretter or compiler ?
-->Interpreter because java program line by line.

JDK = JRE + Developer Tools
JRE = JVM + Library Classes

----------------------------------------------------


Various Memory areas present inside JVM

1. Method area : class level data is stored in method area
2. Heap area : Objects and corresponding instance variables will be stored
3. Stack Memeory : every method the JVM will create a Runtime stack all method calls
performed by that Thread and corresponding local variable
4. Pc Registers : instruction which has to execute next will be stored in the corresponding PC
Registers.
5. Native Method stacks : Native method stacks are not written in Java language. This memory is allocated for each thread when it's created And it can be of a fixed or dynamic nature


---------------------------------------------------------


Java coding standards

classes:
*class names are nouns.
*Should starts with uppercase letter and if it contains multiple words every inner word should starts with upper case letter


interfaces:

*class names are adjectives.
*Should starts with uppercase letter and if it contains multiple words every inner word should starts with upper case letter


methods:

*method names are either verbs or verb-noun combination.
*(camel case convention)

variables:

*variable names are nouns.
*(camel case convention)


constants:
*constants are nouns.
*Should contain only uppercase characters and if it contains multiple words then these words are separated with underscore symbol.
*we can declare constants by using public static final modifiers.

---------------------------------------------------

Main Method

class must contains main() method , if it not then at runtime JVM is responsible for this and it will get runtime exception. (NoSuchMethodError: main)

At runtime JVM always searches for the main() method with the following prototype.



public static  void main(String [] args);

public : To call by jvm from anywhere
static : without existing object also jvm has to call this method
void : main method won`t return anything to jvm


Note: 

1. order of modifer is not important
2. Instead of args we can use any valid java identifier.
3. We can replace string[] with var-arg parameter.
4. main() method can be declared wiht  including  modifiers : final, synchronized, strictfp.
5. Overloading of the main() method is possible but JVM always calls string[] argument main() method only.
6. check wheather main() available or not.
if yes then execute static block is it is available then execute main() method,
else raise error

--------------------------------------------------------
Identifier :name in java program may be classname, methodname etc.

Rule:
1. allowed charcter in java identifier are
a to z
A to Z
0 to 9
_ (underscore)
$

2.identifiers are not allowed to starts with digit.
3.case sensitive
4.no length limit for java identifiers (recommended to take less than 15 lengths)
5.can't use reserved words as identifier
6.All predefined java class names and interface names we use as identifiers.

--------------------------------------------------------
Reserved Words (53) : Reserved words are words that cannot be used as identifier.


Reserved Words (53) => Keywords : (50)
		       Reserved Literals : (3) : true, false, null




Keywords : (50) => Used Keywords(48)
		   Unused Keywords(2) : goto  and const

Const: Use final instead of this.
goto: Create several problems in old languages and hence it is banned in java.

		   

data types: 
byte
short
int
long
float
double
char
boolean




flow control:
if
else
switch
case
default
for
do
while
break
continue
return

modifiers :

public
private
protected
static
final
abstract
synchronized
native
strictfp(1.2 version)
transient
volatile



exception handling: 
try
catch
finally
throw
throws
assert(1.4 version)


class related keywords:
class
package
import
extends
implements
interface

Object related keywords
new
instanceof
super
this


void : won't return anything and it is compulsary to use if a method wont return anthing.
enum : to define a group of named constants
--------------------------------------


Java is pure object oriented programming or not?
Java is not considered as pure object oriented programming language because several oops features (like multiple inheritance, operator overloading) are not supported by java moreover we are depending on primitive data types which are non objects.

---------------------------------------
primitive data type


datatype 	Size		Range					Default value

byte		1 byte 		-2^7 to 2^7-1(-128 to 127)			0
short		2 bytes		-2^15 to 2^ -1 (-32768 to 32767)		0
int		4 bytes		-2^31 to 2^31-1 (-2147483648to 2147483647)	0
long		8 bytes		-2^63 to 2^63-1					0
float		4 bytes		-3.4e38 to 3.4e38				0.0
double		8 bytes		-1.7e308 to 1.7e308				0.0
boolean		Not applicable	Not applicable( true|false)			false
char		2 bytes		0 to 65535					0(represents blank space)

------------------------------------
Integral Literals:

For the integral data types (byte, short, int and long) we can specify literal value in the
following ways.

1) Decimal literals: Allowed digits are 0 to 9.
Example: int x=10;

2) Octal literals: Allowed digits are 0 to 7. Literal value should be prefixed with zero.
Example: int x=010;

3) Hexa Decimal literals:
The allowed digits are 0 to 9, A to Z.
For the extra digits we can use both upper case and lower case characters.
This is one of very few areas where java is not case sensitive.
Literal value should be prefixed with ox(or)oX.

Floating Point Literals:

Floating point literal is by default double type but we can specify explicitly as float type
by suffixing with f or F.

We can specify floating point literal only in decimal form and we can't specify in octal
and hexadecimal forms.


Note : We can assign integral literal directly to the floating point data types and that integral
literal can be specified in decimal , octal and Hexa decimal form also.

Boolean literals:
The only allowed values for the boolean type are true (or) false where case is important.
i.e., lower case


Char literals:
1) A char literal can be represented as single character within single quotes.

2) We can specify a char literal as integral literal which represents Unicode of that character.We can specify that integral literal either in decimal or octal or hexadecimal form but allowed values range is 0 to 65535.

3) We can represent a char literal by Unicode representation which is nothing but â€˜\uxxxx' (4 digit hexa-decimal number) .

String literals:
Any sequence of characters with in double quotes is treated as String literal.


Binary Literals :
The allowed digits are 0 to 1.
Literal value should be prefixed with Ob or OB .


Usage of _ symbol in numeric literals :
use underscore(_) symbol in numeric literals.
Eg.
double d = 6.789;//valid
double d = 23_456.7_8_9;//valid
double d = 456.7_8_9; //valid

The main advantage of this approach is readability of the code will be improved At the time of compilation ' _ ' symbols will be removed automatically.


double d = 6.789;
double d = 23456.789;
double d = 456.789; 


---------------------------------------------------
Types of Variables:


Based on the type of value represented by a variable all variables are divided into 2 types. They are:
1. Primitive variables: used to represent primitive values.

2. Reference variables: used to refer objects.



Based on the behaviour and position of declaration all variables are divided into the following 3 types.
1. Instance variables
2. Static variables
3. Local variables




Local Variable:
Defined within a method or a code block
Is only accessible in the method/code block where it is declared
Remains in memory as long as the method executes
Does not require any special keyword
Requires to be initialized before it is used
Local variables will be stored inside stack.
The local variables will be created as part of the block execution in which it is declared and destroyed once that block execution completes. Hence the scope of the local variables is exactly same as scope of the block in which we declared.


Instance Variable:
Defined outside a method at the class level
Is accessible throughout the class
Remains in memory as long as the object is in memory
Does not require any special keyword but any access specifier (private, protected or public) can be specified. Typically, private or protected is used.
Is given default value based on its data type, so does not require to be initialized before it is used.
Instance variables will be stored on the heap as the part of object.
For every object a separate copy of instance variables will be created.
Instance variables will be created at the time of object creation and destroyed at the time of object destruction hence the scope of instance variables is exactly same as scope of objects.
If the value of a variable is varied from object to object such type of variables are called instance variables.



Static Variable:
Defined outside a method at the class level
Is accessible throughout the class
Remains in memory as long as program executes
Requires the static keyword to be specified. In addition, any access specifier (private, protected or public) can be specified. Typically, public is used
Is given default value based on its data type, so does not require to be initialized before it is used.
Static variables will be stored in method area.
If the value of a variable is not varied from object to object such type of variables is not recommended to declare as instance variables. We have to declare such type of variables at class level by using static modifier
In the case of instance variables for every object a separate copy will be created but in the case of static variables for entire class only one copy will be created and shared by every object of that clas



-----------------------------------------------------

